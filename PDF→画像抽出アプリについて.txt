PDF→画像抽出アプリについて

・PDFのアップロード
　・パスを指定してアップロード
・画像抽出法
　・画像の保存フォルダ名はPDF名から
　・PyMuPDFの機能でPDFを読み込む
　・１ページずつ画像データを取得し保存
　　get_images()は，PyMuPDF（fitz）ライブラリを使用してPDFの特定のページから画像データを取得するメソッドで，
　　PDFページに埋め込まれている画像に関する情報をリストとして返す
　・プレビューについては，画像データをHTMlにリストを渡すことで表示
・wordダウンロード
　・python-docxの機能により，新規ページの作成
　・抽出画像ファイルを取得し，一枚ずつ貼り付け
　・Flaskのダウンロード機能でwordのダウンロードを可能に.
    send_from_directory関数を使用します。この関数は、指定したディレクトリからファイルをクライアントに送信
    指定されたディレクトリ内のファイルのみを提供するため安全
    この関数はFlaskの組み込み関数であり，ディレクトリとファイル名を指定するだけでファイルを提供できる

画像トリミングについて
・ファイルのアップロード，画像表示，トリミング機能はJavaScriptで実装
・Flask側では，画像とトリミング座標を用いて，OpenCVの機能より切り取りを行う
・JavaScript側では，マウスのクリック，ドラック機能によりトリミングエリアを実装
・プレビュー機能についてもJavaScriptで実装


スキャン画像から自動抽出
・赤枠で囲った部分以外を余白とする機能
　・画像をHSV空間に変換
　・主に色相の値をいじって，赤色の範囲を設定して，cvの機能で二値化（赤い部分を白，他を黒に）
　　色相の赤の範囲を2つ設定して"cv2.bitwise_or"関数で論理和を取りマスクを生成し二値化
　・ノイズを除去
　・赤枠内部を白，それ以外を黒とするようなマスクを合成して，内部以外を余白とする処理を実装
・物体を検出して画像を取得する機能
　・//PILの機能を使い
　・真っ白の画像と先ほど作成した画像との差を取って，２値画像を作り，
　・OpenCVの機能，"cv2.findContours"を使って繋がっている物体の輪郭をそれぞれ検出する機能を実装し，
　・輪郭の数トリミングする
　
